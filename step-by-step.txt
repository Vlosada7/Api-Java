Steps to create an API:

  Initialize Java project: 
    1o - CTRL + SHIFT + P (Command pallet);
    2o - Java overview;
    3o - Create a Spring Boot project;
    4o - Select the project manager (Maven or Gradle) - This one gonna be Maven;
    5o - Choose the Spring Boot version: More recent but not snapshot or M1 (Tests versions);
    6o - Specify project language (Not just Java) - This one gonna be Java;
    7o - Specifie Group ID (Company name, Company domain, Site name) - es.com.empresaName (Not the same order as usually);
    8o - Specifie Artifact ID - Project name(without space, just "_" or "-"); 
    9o - Choose the extesion the project gonna do (Gonna build in JAR or WAR) - This one gonna be JAR 
    10o - Choose the Java version of the project - This one gonna be 11;
    11o - Choose dependencies to use - This one gonna use Spring Boot DevTools (like nodemon), Spring Web (to create API RESTful)
    12o - Choose the folder to generate the project; 
    13o - Choose to open or add-workspace
    14o - If appears an option to import the project click on "Yes" to load and download all dependencies you have in your project. Wait until the service is ready;
  
  API structure (inside src/main/java/com/first_api/first_api):
    1o - Create the Model folder;
    2o - Create the Controller folder;
    3o - Create the Services fodler;
    4o - Create the Repository folder;

  Model structure (inside src/main/java/com/first_api/first_api/Model):
    1o - Create new file (ex Product.java);
    2o - Create the atributes for the model; 
    3o - Separe the lines and create the getters and setters;
    4o - Create a region with #region to organize and #endregion;

  Repository structure (inside src/main/java/com/first_api/first_api/Repository):
    1o - Create new file (ex ProductRepository.java);
    2o - Connect with DB or simulate an DB; 
      To simulate DB: 
        1o - Upside the class name, put @Repository and import what is necessary; 
        2o - Create the atributes
        3o - Create the methods;
        4o - Create Javadocument comment in each method (/**);
      To connect with DB:
        * - Install the dependencies Spring Data JPA, Spring Data JDBC, postgresSQL Driver
        1o - Create the DB in whatever db you want (ex postgresSQL/MongoDB) 
        2o - Config the path to the DB in the src/main/resources/application.properties
        3o - Update de properties of the product model and put @Entity upside the name

  Service structure (inside src/main/java/com/first_api/first_api/Service): 
    1o - Create new file (ex ProductService.java);
    2o - Upside the class name, put @Service and import what is necessary;
    3o - Instance the Repository and use @Autowired; 
    4o - Create the same methods from Repository;
    5o - Create any rule inside the methods if necessary (like auth or requirements for methods);

  Controller structure (inside src/main/java/com/first_api/first_api/Controller):
    1o - Create new file (ex ProductController.java);
    2o - Upside the class name, put @RestController and import what is necessary;
    3o - Choose the what route the Controller will listening (Below the @RestController put @RequestMapping("/api/products"));
    4o - Instance the service at the begging ant put @Autowired;
    5o - Create the methods;
    6o - Before all the methods you have to put @GetMapping, @PostMapping, @PutMapping, @DeleteMapping
   
